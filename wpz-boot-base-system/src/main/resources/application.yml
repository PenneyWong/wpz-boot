server:
  port: 8080

#eureka 配置
#eureka:
#  instance:
#    prefer-ip-address: true
#  client:
#    service-url:
#      defaultZone: http://localhost:8080/eureka/
eureka:
  client:
    service-url: http://localhost:8080/eureka/
  instance:
    lease-renewal-interval-in-seconds: 10 #租期更新时间间隔--默认30秒
    lease-expiration-duration-in-seconds: 30 #租期到期时间--默认90秒
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
    hostname: ${spring.cloud.client.ip-address}

spring:
  application:
    name: wpz-boot-users
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  aop:
    proxy-target-class: true
  datasource:
    druid:
      url: jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
      username: root
      password: 123456
      driver-class-name: com.mysql.cj.jdbc.Driver
      stat-view-servlet:
        enabled: true
        loginUsername: admin
        loginPassword: 123456
        allow:
      web-stat-filter:
        enabled: true
  redis:
    #单机配置
    host: 192.168.2.2
    port: 6379
    #集群配置
    #    cluster:
    #      nodes: 10.254.12.16:7001,10.254.12.17:7002,10.254.12.18:7003,10.254.12.19:7004,10.254.12.20:7005,10.254.12.21:7006 #集群节点ip
    #      max-redirects: 3 #跨集群执行命令时要遵循的最大重定向数量
    database: 0
    password: ''
    timeout: 3000
    lettuce:
      shutdown-timeout: 100ms
      pool:
       max-active: 20     #最大连接数据库连接数,设 0 为没有限制
       max-idle: 10       #最大等待连接中的数量,设 0 为没有限制
       max-wait: 1000    #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制
       min-idle: 2       #最小等待连接中的数量,设 0 为没有限制
  kafka:
    # 以逗号分隔的地址列表，用于建立与Kafka集群的初始连接(kafka 默认的端口号为9092)
#    bootstrap-servers: 10.254.12.14:9092,10.254.12.15:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 3
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: all
      # max_in_flight_requests_per_connection: 阻塞之前，客户端单个连接上发送的未应答请求的最大数量。 默认为5
      # 注意，如果此设置设置大于1且发送失败，则会由于重试（如果启用了重试）会导致消息重新排序的风险.
      # 同时acks需要设置为all
      max_in_flight_requests_per_connection: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 2000
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      group-id: users_user_result
      max-poll-records: 3000
    listener:
      ack-mode: manual_immediate
#mybatis 配置
mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true

ribbon:
  ReadTimeout: 30000
  ConnectTimeout: 3000

#定时任务配置
elaticjob:
  zookeeper:
    server-lists: 10.254.12.10:2181,10.254.12.11:2181,10.254.12.12:2181
    namespace: im_users_center_jobs
